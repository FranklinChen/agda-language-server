# modified from https://github.com/simonmichael/hledger/blob/master/.github/workflows/mac.yml

name: CI (macOS)

on: [push, pull_request]

jobs:
  build:
    runs-on: macos-latest
    steps:

    - name: üì• Checkout repository
      uses: actions/checkout@v2

    # things to be cached/restored:

    - name: üíæ Cache stack global package db
      id:   stack-global
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-after20210110-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-global-after202110110
    - name: üíæ Cache stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache@v2
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-stack-programs-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-programs
    - name: üíæ Cache .stack-work
      uses: actions/cache@v2
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work
    - name: üíæ Cache agda-language-server/.stack-work
      uses: actions/cache@v2
      with:
        path: agda-language-server/.stack-work
        key: ${{ runner.os }}-agda-language-server-stack-work-${{ hashFiles('agda-language-server/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-agda-language-server-stack-work

    # actions:

    - name: ‚è¨ Install stack
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH        
        # brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
        if [[ ! -x ~/.local/bin/stack ]]; then brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
        stack --version

    - name: ‚è¨ Install GHC
      run: |
        stack setup --install-ghc

    - name: ‚è¨ Install dependencies
      run: |
        stack build --only-dependencies

    - name: üî® Build and run tests
      run: |
        stack test

    - name: üîó Bundle ICU4C DLLs
      run: |    # Bundle ICU4C DLLs
        # Bundle ICU4C DLLs
        executable=$(find $(stack path --local-install-root)/bin -name "als")
        # executable=als

        # get libicuuc's ID
        icuuc_id=$(otool -L $executable | grep icuuc | awk '{print $1}')

        if [ $(dirname $icuuc_id) = "@loader_path/lib" ] 
        then 
            echo "DDLs has already been prepared"
            ls lib 
        else 
            # if $icuuc_id does not begins with "@loader_path/lib"
            # then it should be an absolute path to the DLL
            icuuc_path=$icuuc_id

            # path of dir of text-icu DLLs
            libdir=$(dirname $icuuc_path)

            # get libicui18n's ID and path 
            icui18n_id=$(otool -L $executable | grep icui18n | awk '{print $1}')
            icui18n_path=$icui18n_id

            # get icudata's ID and path 
            icudata_id=$(otool -L $icui18n_id | grep icudata | awk '{print $1}')
            icudata_path=$libdir/$(basename $icudata_id)

            # copy DDLs into "lib/"
            mkdir lib/
            cp $icuuc_path lib/
            cp $icui18n_path lib/
            cp $icudata_path lib/

            # use "install_name_tool" to update ALS to search for DDLs in "lib/" instead
            echo "[linker] before changing LC_LOAD_DYLIB of icuuc in ALS:"
            otool -l $executable | grep icuuc -B2
            echo "[linker] after changing LC_LOAD_DYLIB of icuuc in ALS:"
            install_name_tool -change $icuuc_id @loader_path/lib/$(basename $icuuc_id) $executable 
            otool -l $executable | grep icuuc -B2

            echo "[linker] before changing LC_LOAD_DYLIB of icui18n in ALS:"
            otool -l $executable | grep icui18n -B2
            echo "[linker] after changing LC_LOAD_DYLIB of icui18n in ALS:"
            install_name_tool -change $icui18n_id @loader_path/lib/$(basename $icui18n_id) $executable 
            otool -l $executable | grep icui18n -B2
        fi 

    - name: üì¶ Compress files
      id: zip
      run: |
        # locate the data-dir
        datadir=$(find $(stack path --snapshot-install-root)/share -type d -name "Agda-*")
        
        # locate the executable 
        executable=$(find $(stack path --local-install-root)/bin -name "als")

        # make a temporary directory for compresssing
        mkdir zip
        cp -r $datadir zip/data
        cp -r lib zip/lib
        cp $executable zip/
        
        # compress
        cd zip 
        zip -r als-macos.zip *
        cd .. 
        mv zip/als-macos.zip .

    - name: üö¢ Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') # so that only commits with a git tag would upload artifacts
      with:
        files: als-macos.zip
        draft: true
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}